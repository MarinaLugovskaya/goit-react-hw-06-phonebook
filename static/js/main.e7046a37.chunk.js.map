{"version":3,"sources":["components/Filter/Filter.module.css","style.module.css","redux/contacts/contacts-types.js","redux/contacts/contacts-actions.js","components/Form/Form.jsx","redux/contacts/contacts-selectors.js","components/Contacts/Contacts.jsx","components/Filter/Filter.jsx","components/App.jsx","redux/contacts/contacts-reducer.js","redux/store.js","index.js","components/Contacts/Contacts.module.css"],"names":["module","exports","name","number","type","types","payload","id","shortid","generate","contactId","value","Form","dispatch","useDispatch","useState","setName","setNumber","handleInputChange","evt","currentTarget","className","css","title","onSubmit","preventDefault","alert","contactsActions","signin","signinInput","onChange","pattern","required","placeholder","signinButton","getFilter","state","contacts","filter","getVisibleContacts","items","getContacts","normalizedFilter","toLowerCase","contact","includes","Contacts","useSelector","map","item","text","button","onClick","Filter","input","target","App","Component","combineReducers","rootReducer","contactsReducer","store","createStore","composeWithDevTools","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e7046a37.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Filter_input__YMQnt\",\"text\":\"Filter_text__3Svig\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"signin\":\"style_signin__aVtAi\",\"signinInput\":\"style_signinInput__GN1r3\",\"signinButton\":\"style_signinButton__BwnbU\",\"signinIinput\":\"style_signinIinput__Z_yuo\",\"signinText\":\"style_signinText__2NYWK\",\"title\":\"style_title__35P5e\"};","export default {\n  ADD_CONTACTS: 'contacts/add',\n  DELETE_CONTACTS: 'contacts/delete',\n  CHANGE_FILTER: 'contacts/changeFilter',\n};\n","import shortid from 'shortid';\nimport types from './contacts-types';\n\nconst addContacts = (name, number) => ({\n  type: types.ADD_CONTACTS,\n  payload: {\n    id: shortid.generate(),\n    name,\n    number,\n  },\n});\n\nconst deleteContacts = contactId => ({\n  type: types.DELETE_CONTACTS,\n  payload: contactId,\n});\n\nconst changeFilter = value => ({\n  type: types.CHANGE_FILTER,\n  payload: value,\n});\n\nexport default { addContacts, deleteContacts, changeFilter };\n","import React, { useState } from 'react';\r\nimport { connect, useDispatch } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport contactsActions from '../../redux/contacts/contacts-actions';\r\nimport css from '../../../src/style.module.css';\r\n\r\nexport default function Form() {\r\n  const dispatch = useDispatch();\r\n\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n\r\n  const handleInputChange = evt => {\r\n    const { name, value } = evt.currentTarget;\r\n\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n\r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = evt => {\r\n    evt.preventDefault();\r\n\r\n    if (name === '' || number === '') {\r\n      return alert('fill out the form');\r\n    }\r\n\r\n    dispatch(contactsActions.addContacts(name, number));\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h1 className={css.title}>Phonebook</h1>\r\n      <form onSubmit={handleSubmit} className={css.signin}>\r\n        <input\r\n          className={css.signinInput}\r\n          type=\"text\"\r\n          name=\"name\"\r\n          value={name}\r\n          onChange={handleInputChange}\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n          placeholder=\"name\"\r\n        />\r\n\r\n        <input\r\n          className={css.signinInput}\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          value={number}\r\n          onChange={handleInputChange}\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n          placeholder=\"number\"\r\n        />\r\n\r\n        <button className={css.signinButton} type=\"submit\">\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    </>\r\n  );\r\n}\r\n\r\nForm.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string,\r\n      number: PropTypes.string,\r\n    }).isRequired,\r\n  ),\r\n};\r\n\r\n// const mapStateToProps = state => ({\r\n//   contacts: state.contacts,\r\n// });\r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//   onSubmit: (name, number) => dispatch(contactsActions.addContacts(name, number)),\r\n// });\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(Form);\r\n","export const getContacts = state => state.contacts.items;\nexport const getFilter = state => state.contacts.filter;\n\nexport const getVisibleContacts = state => {\n  const contacts = getContacts(state);\n  const filter = getFilter(state);\n  const normalizedFilter = filter.toLowerCase();\n  return contacts.filter(contact => contact.name.toLowerCase().includes(normalizedFilter));\n};\n","import PropTypes from 'prop-types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport contactsActions from '../../redux/contacts/contacts-actions';\r\nimport { getVisibleContacts } from '../../redux/contacts/contacts-selectors';\r\nimport css from '../Contacts/Contacts.module.css';\r\n\r\nconst Contacts = () => {\r\n  const dispatch = useDispatch();\r\n  const contacts = useSelector(getVisibleContacts);\r\n\r\n  const onClick = id => dispatch(contactsActions.deleteContacts(id));\r\n\r\n  return (\r\n    <>\r\n      <h2 className={css.title}>Contacts</h2>\r\n      <ul>\r\n        {contacts.map(contact => (\r\n          <li className={css.item} key={contacts.id}>\r\n            <p className={css.text}>\r\n              {contact.name}: {contact.number}\r\n            </p>\r\n            <button className={css.button} onClick={() => onClick(contact.id)} type=\"button\">\r\n              Delete\r\n            </button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\nexport default Contacts;\r\n\r\n// const mapStateToProps = state => {\r\n//   const { filter, items } = state.contacts;\r\n\r\n//   const visibleContacts = getVisibleContacts(items, filter);\r\n\r\n//   return {\r\n//     contacts: visibleContacts,\r\n//   };\r\n// };\r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//   onClick: id => dispatch(contactsActions.deleteContacts(id)),\r\n// });\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(Contacts);\r\n\r\nContacts.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }).isRequired,\r\n  ).isRequired,\r\n};\r\n","import PropTypes from 'prop-types';\r\n// import { connect } from 'react-redux';\r\nimport contactsActions from '../../redux/contacts/contacts-actions';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getFilter } from '../../redux/contacts/contacts-selectors';\r\nimport css from '../../components/Filter/Filter.module.css';\r\n\r\nconst Filter = () => {\r\n  const value = useSelector(getFilter);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <>\r\n      <label className={css.text}>\r\n        Find contacts by name\r\n        <input\r\n          className={css.input}\r\n          type=\"text\"\r\n          name=\"filter\"\r\n          value={value}\r\n          onChange={evt => dispatch(contactsActions.changeFilter(evt.target.value))}\r\n        />\r\n      </label>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\n// const mapStateToProps = state => ({\r\n//   value: state.contacts.filter,\r\n// });\r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//   onChange: evt => dispatch(contactsActions.changeFilter(evt.target.value)),\r\n// });\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React, { Component } from 'react';\nimport Form from '../components/Form/Form';\nimport Contacts from '../components/Contacts/Contacts';\nimport Filter from '../components/Filter/Filter';\nimport css from '../components/Form/Form.module.css';\n\nexport default class App extends Component {\n  render() {\n    return (\n      <>\n        <Form />\n        <Filter />\n        <Contacts />\n      </>\n    );\n  }\n}\n","import { combineReducers } from 'redux';\nimport types from './contacts-types';\n\nconst items = (state = [], { type, payload }) => {\n  switch (type) {\n    case types.ADD_CONTACTS:\n      return [...state, payload];\n\n    case types.DELETE_CONTACTS:\n      return state.filter(contact => contact.id !== payload);\n\n    default:\n      return state;\n  }\n};\n\nconst filter = (state = '', { type, payload }) => {\n  switch (type) {\n    case types.CHANGE_FILTER:\n      return payload;\n\n    default:\n      return state;\n  }\n};\n\nexport default combineReducers({\n  items,\n  filter,\n});\n","import { createStore, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport contactsReducer from './contacts/contacts-reducer';\n\nconst rootReducer = combineReducers({\n  contacts: contactsReducer,\n});\n\nconst store = createStore(rootReducer, composeWithDevTools());\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n    ;\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Contacts_title__3EqeW\",\"text\":\"Contacts_text__3H6PG\",\"item\":\"Contacts_item__M4Lzi\",\"button\":\"Contacts_button__1AoiR\"};"],"sourceRoot":""}