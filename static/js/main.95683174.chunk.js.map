{"version":3,"sources":["components/Filter/Filter.module.css","redux/contacts/contacts-actions.js","components/Form/Form.jsx","redux/contacts/contacts-selectors.js","components/Contacts/Contacts.jsx","components/Filter/Filter.jsx","components/App.jsx","redux/contacts/contacts-reducer.js","redux/store.js","index.js","components/Form/Form.module.css","components/Contacts/Contacts.module.css"],"names":["module","exports","addContacts","createAction","name","number","payload","id","shortid","generate","deleteContacts","changeFilter","Form","dispatch","useDispatch","useState","setName","setNumber","handleInputChange","evt","currentTarget","value","className","css","title","onSubmit","preventDefault","contactsActions","alert","signin","signinInput","type","onChange","pattern","required","placeholder","signinButton","getFilter","state","contacts","filter","getVisibleContacts","items","getContacts","normalizedFilter","toLowerCase","contact","includes","Contacts","useSelector","map","item","text","button","onClick","Filter","input","target","App","Component","createReducer","actions","action","combineReducers","middleware","getDefaultMiddleware","logger","store","configureStore","reducer","contactsReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.95683174.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Filter_input__YMQnt\",\"text\":\"Filter_text__3Svig\"};","import shortid from 'shortid';\nimport { createAction } from '@reduxjs/toolkit';\n\nconst addContacts = createAction('contacts/add', (name,number) => {\n  return{\n  payload: {\n    id: shortid.generate(),\n    name,\n    number,\n  }\n  }\n});\n\nconst deleteContacts = createAction('contacts/delete')\nconst changeFilter = createAction('contacts/changeFilter')\n\nexport default { addContacts, deleteContacts, changeFilter };\n","import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport contactsActions from '../../redux/contacts/contacts-actions';\r\nimport css from '../Form/Form.module.css';\r\n\r\nexport default function Form() {\r\n  const dispatch = useDispatch();\r\n\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n\r\n  const handleInputChange = evt => {\r\n    const { name, value } = evt.currentTarget;\r\n\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n\r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = evt => {\r\n    evt.preventDefault();\r\n\r\n    if (name !== '' || number !== '') {\r\n      dispatch(contactsActions.addContacts(name, number));\r\n      setName('');\r\n      setNumber('');\r\n      return;\r\n    }\r\n    return alert('fill out the form');\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h1 className={css.title}>Phonebook</h1>\r\n      <form onSubmit={handleSubmit} className={css.signin}>\r\n        <input\r\n          className={css.signinInput}\r\n          type=\"text\"\r\n          name=\"name\"\r\n          value={name}\r\n          onChange={handleInputChange}\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n          placeholder=\"name\"\r\n        />\r\n\r\n        <input\r\n          className={css.signinInput}\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          value={number}\r\n          onChange={handleInputChange}\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n          placeholder=\"number\"\r\n        />\r\n\r\n        <button className={css.signinButton} type=\"submit\">\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    </>\r\n  );\r\n}\r\n\r\nForm.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string,\r\n      number: PropTypes.string,\r\n    }).isRequired,\r\n  ),\r\n};\r\n","export const getContacts = state => state.contacts.items;\nexport const getFilter = state => state.contacts.filter;\n\nexport const getVisibleContacts = state => {\n  const contacts = getContacts(state);\n  const filter = getFilter(state);\n  const normalizedFilter = filter.toLowerCase();\n  return contacts.filter(contact => contact.name.toLowerCase().includes(normalizedFilter));\n};\n","import PropTypes from 'prop-types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport contactsActions from '../../redux/contacts/contacts-actions';\r\nimport { getVisibleContacts } from '../../redux/contacts/contacts-selectors';\r\nimport css from '../Contacts/Contacts.module.css';\r\n\r\nconst Contacts = () => {\r\n  const dispatch = useDispatch();\r\n  const contacts = useSelector(getVisibleContacts);\r\n\r\n  const onClick = id => dispatch(contactsActions.deleteContacts(id));\r\n\r\n  return (\r\n    <>\r\n      <h2 className={css.title}>Contacts</h2>\r\n      <ul>\r\n        {contacts.map(contact => (\r\n          <li className={css.item} key={contacts.id}>\r\n            <p className={css.text}>\r\n              {contact.name}: {contact.number}\r\n            </p>\r\n            <button className={css.button} onClick={() => onClick(contact.id)} type=\"button\">\r\n              Delete\r\n            </button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Contacts;\r\n\r\nContacts.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }).isRequired,\r\n  ).isRequired,\r\n};\r\n","import PropTypes from 'prop-types';\r\nimport contactsActions from '../../redux/contacts/contacts-actions';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getFilter } from '../../redux/contacts/contacts-selectors';\r\nimport css from '../../components/Filter/Filter.module.css';\r\n\r\nconst Filter = () => {\r\n  const value = useSelector(getFilter);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <>\r\n      <label className={css.text}>\r\n        Find contacts by name\r\n        <input\r\n          className={css.input}\r\n          type=\"text\"\r\n          name=\"filter\"\r\n          value={value}\r\n          onChange={evt => dispatch(contactsActions.changeFilter(evt.target.value))}\r\n        />\r\n      </label>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n","import React, { Component } from 'react';\nimport Form from '../components/Form/Form';\nimport Contacts from '../components/Contacts/Contacts';\nimport Filter from '../components/Filter/Filter';\n\nexport default class App extends Component {\n  render() {\n    return (\n      <>\n        <Form />\n        <Filter />\n        <Contacts />\n      </>\n    );\n  }\n}\n","import { createReducer } from '@reduxjs/toolkit';\nimport { combineReducers } from 'redux';\nimport actions from './contacts-actions';\n\nconst items = createReducer([], {\n  [actions.addContacts]: (state, action) => [...state, action.payload],\n  [actions.deleteContacts]: (state, action) => state.filter(contact => contact.id !== action.payload),\n})\n\nconst filter = createReducer('', {\n  [actions.changeFilter]: (state,actions) => actions.payload,\n})\n\nexport default combineReducers({\n  items,\n  filter,\n});\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport contactsReducer from './contacts/contacts-reducer';\nimport logger from 'redux-logger';\n\nconst middleware = [...getDefaultMiddleware(), logger]\n\nconst store = configureStore({\n  reducer: {\n  contacts: contactsReducer },\n  middleware,\n})\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n    ;\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"signin\":\"Form_signin__3Bv6A\",\"signinInput\":\"Form_signinInput__2dV9_\",\"signinButton\":\"Form_signinButton__P2T6d\",\"signinIinput\":\"Form_signinIinput__3IzAJ\",\"signinText\":\"Form_signinText__2nk8V\",\"title\":\"Form_title__n8UO6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Contacts_title__3EqeW\",\"text\":\"Contacts_text__3H6PG\",\"item\":\"Contacts_item__M4Lzi\",\"button\":\"Contacts_button__1AoiR\"};"],"sourceRoot":""}